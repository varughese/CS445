What are the outputs for number of moves?

20 Random:
Merge      	Time Taken: 17,373 ns		Moves: 88 moves
Selection	Time Taken: 10,728 ns		Moves: 19  moves
Bubble   	Time Taken: 17,762 ns		Moves: 102 moves
Insertion	Time Taken: 10,558 ns		Moves: 79 moves

200 Random:
Merge      	Time Taken: 907,775   ns		Moves: 21,952 moves
Selection	Time Taken: 8,449,995 ns		Moves: 1,999 moves
Bubble   	Time Taken: 9,531,920 ns		Moves: 1,013,265 moves
Insertion	Time Taken: 9,439,298 ns		Moves: 1,008,038 moves

20000 Random:
Merge      	Time Taken: 5,335,120 ns		Moves: 287,232 moves
Selection	Time Taken: 143,244,580 ns		Moves: 99,999 moves
Bubble   	Time Taken: 677,221,388 ns		Moves: 99,356,340 moves
Insertion	Time Taken: 216,442,092 ns		Moves: 99,563,408 moves

What are the outputs for runtime?
Look above


How do your results compare to your understanding of these algorithms?
My results compare pretty well with my understanding of these algorithms. Bubble sort is the least efficient sorting method in all categories. Initially, I thought it was surprising to see selection sort be a small number of moves, but than I realized that it only does a swap per element. Merge sort is by far the most efficient because it is n logn runtime. The memory allocation of the array does take up more space, but with today's technology it is a worthwhile tradeoff. It does take more moves than selection sort. As n grows large (evident by the 20,000 size array), Merge sort does take around 3 times as many more moves as Selection sort, but it completes the sort in almost 1/30th of the time. This is because Merge sort has to do the moves per each sub array it creates. In other words, the number of moves will always be the same.

Overall, merge sort is obviously the most efficient algorithm. Bubble sort is pretty bad. The only instances where I think merge sort should not be used is if it is known the array is really really closed to being sorted or if memory is super limited. 

If they are different, why do you think this is?
n/a

