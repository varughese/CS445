For 23 pushes, array approach took 20,719ns and linked approach took 312,240ns.

For pops, array approach took 13,723ns and linked approach took 18,055ns.

For 1000 pushes, array approach took 208,058ns and linked approach took 317,417ns.

For pops, array approach took 395,827ns and linked approach took 590,041ns.

For 1000000 pushes, array approach took 49,851,708ns and linked approach took 106,684,577ns.

For pops, array approach took 39,805,825ns and linked approach took 39,302,097ns.

For 40000 sporadic pushes and pops, array approach took 42,870,357ns and linked approach took 69,025,656ns.



Which implementation is faster for small amounts of pushes? 
Array

Which implementation is faster for small amounts of pops? 
Array

Which implementation is faster for larger amounts of pushes?
Array

Which implementation is faster for larger amounts of pops?
Linked (but its pretty close)

How do you explain your results for 1-4?  Were any results surprising?  Why or why not?
In the array implementation, the capacity is always defined (in other words, the memory is explicity reserved until it needs to be dynamically increased when the size of the array is too small), whereas in the linked implementation, a new object (the node) will be created whenever a push is called. For a small amount of pushes, it made sense to me for the array to be faster. In the best case scenario for the array implementation, this push is an O(1) for an operation. In the worst case scenario, it will be O(n) because it will have to copy the array. In the linked list implementation, the operation will always be O(1). However, the linked list implementation would do more computation because it must create a new object. Originally, I thought the operation of copying the array would take more time when doing a large amount of pushes, but on a second thought it makes sense that creating new objects each push takes up more time. Each push for the linked implementation has to allocate a new spot in memory. The array is also faster for pops for a similar reason. In the array implementation, the counter for size is decremented, whereas in the linked list the pointer to the head variable needs to be changed. Intuitively, it makes sense that decrementing a counter takes less time then repointing a object reference. However, for a large amount of pops, the times are pretty close for both the array and linked implementation. 



What are the tradeoffs to be considered in these implementations?
The array method trades time for memory and the linked list trades memory for time. The array implementation should be used when the capacity of elements in the stack is known. It might allocate more memory than neccesary, but the operations will be quicker because objects will not have to be created each push. The linked approach is better when it is not known how many elements will be in the stack, because it only allocates as much memory as needed.
