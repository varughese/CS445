1. Why do we implement hashCode on individual objects, instead of centrally?  For example, why don't we create a new class that implements hashCode for different objects, or implement hashing functions in the hash table itself?
The hashCode is totally specific to the object itself. A HashTable has a singular purpose that can somewhat be summed up as: put certain things out based on a key, and get things out from that key. It is object agnostic, so it does not really know / should not really know anything specific to the object itself, including the hashcode. Additionally, the hashCode needs to be calculated based on the information about the object.

2. Can you create a hashing function for an object that only has transient data?  Why or why not?
Yes I think that it might be possible depending on the object. For example, if the uniquness of the object is dependent on something like, when the object was created, then the date of the initial creation can be used as the hashcode. This has some obvious flaws, but can perhaps the idea can be improved upon. If the object's initial creation timestamp was concatenated with its other initial data, then that concatenated string's hash could be used as the hashcode. However, the validity of this solution is dependent on the object and whether or not this will make sense. Ultimately if something is composed entirely of data that changes constantly it would be hard to hash it because it would not really have an indentifier unless their was some sort of static counter for the entire object that updated each new object creation.

3. Let's say we have an object that has limited variability in its data - say, only 1000 possible combinations of values.  Can we create a hash code for such an object?  Why or why not?
Yes we can. A hash code must be unique, repeatable, and ireversible. There would just need to be some sort of way to map each of those 1000 combinations to a hashcode that is well distributed. Just because there is only 1000 combinations does not limit the fact a hashcode could be made. 
